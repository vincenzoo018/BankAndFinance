@{
    ViewBag.Title = "Withdraw";
    ViewBag.PageTitle = "Withdraw Money";
    ViewBag.Breadcrumb = "Home / Banking / Withdraw";
}

<div class="card" style="max-width: 600px; margin: 0 auto;">
    <div class="card-header">
        <div class="card-title">Withdraw Money</div>
    </div>
    
    <div style="padding: 20px;">
        @if (ViewBag.Error != null)
        {
            <div class="error-message">
                @ViewBag.Error
            </div>
        }
        
        <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <span style="color: #64748b; font-size: 14px;">Account Number:</span>
                <strong style="color: #1e293b;">@ViewBag.AccountNumber</strong>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <span style="color: #64748b; font-size: 14px;">Available Balance:</span>
                <strong style="color: #3dd598; font-size: 20px;">$@ViewBag.CurrentBalance?.ToString("N2")</strong>
            </div>
        </div>
        
        <form method="post" asp-action="Withdraw" asp-controller="Customer" id="withdrawForm" onsubmit="return false;">
            <div class="form-group">
                <label for="amount">Withdrawal Amount</label>
                <input type="number" class="form-input" id="amount" name="amount" step="0.01" min="0.01" required placeholder="Enter amount to withdraw" style="font-size: 18px; padding: 15px;">
            </div>
            
            <div class="form-group">
                <label for="cardId">Select Card for Withdrawal</label>
                @if (ViewBag.Cards != null && ((List<BankAndFinance.Models.Card>)ViewBag.Cards).Any())
                {
                    <select class="form-select" id="cardId" name="cardId" required style="padding: 12px;">
                        <option value="">-- Select a Card --</option>
                        @foreach (var card in (List<BankAndFinance.Models.Card>)ViewBag.Cards)
                        {
                            var cardType = card.CardType == "Debit" ? "üí≥" : "üíé";
                            var lastFour = card.CardNumber.Substring(card.CardNumber.Length - 4);
                            <option value="@card.CardId">@cardType @card.CardType - **** @lastFour</option>
                        }
                    </select>
                    <p style="color: #64748b; font-size: 13px; margin-top: 8px;">
                        ‚ÑπÔ∏è Select the card you want to use for this withdrawal
                    </p>
                }
                else
                {
                    <div style="background: #fef3c7; border: 2px solid #f59e0b; border-radius: 8px; padding: 16px; margin-top: 10px;">
                        <p style="color: #92400e; margin: 0; font-weight: 500;">‚ö†Ô∏è No active cards found</p>
                        <p style="color: #78350f; margin: 8px 0 0 0; font-size: 14px;">
                            You need to request a card first before making withdrawals. 
                            <a href="@Url.Action("MyCards", "Card")" style="color: #d97706; text-decoration: underline;">Request a card here</a>
                        </p>
                    </div>
                }
            </div>
            
            <div style="margin-top: 30px;">
                <button type="button" onclick="showWithdrawConfirmation()" class="btn-submit" style="width: 100%; padding: 15px; font-size: 16px; background: #f59e0b;">üí∏ Withdraw Money</button>
                <a href="@Url.Action("Dashboard", "Customer")" class="btn-cancel" style="width: 100%; text-align: center; margin-top: 10px; display: block; padding: 12px;">Cancel</a>
            </div>
        </form>
    </div>
</div>

<!-- Confirmation Dialog -->
<div class="confirm-overlay" id="confirmOverlay">
    <div class="confirm-dialog">
        <div class="confirm-header" style="background: linear-gradient(135deg, #f59e0b, #d97706);">
            <div class="confirm-icon">üíµ</div>
            <div class="confirm-title">Confirm Withdrawal</div>
        </div>
        <div class="confirm-body">
            <div class="confirm-message">
                Are you sure you want to withdraw this amount from your account?
            </div>
            <div class="confirm-details">
                <div class="confirm-detail-row">
                    <span class="confirm-detail-label">Account Number:</span>
                    <span class="confirm-detail-value">@ViewBag.AccountNumber</span>
                </div>
                <div class="confirm-detail-row">
                    <span class="confirm-detail-label">Available Balance:</span>
                    <span class="confirm-detail-value">$@ViewBag.CurrentBalance?.ToString("N2")</span>
                </div>
                <div class="confirm-detail-row">
                    <span class="confirm-detail-label">Withdrawal Amount:</span>
                    <span class="confirm-detail-value" id="confirmAmount" style="color: #f59e0b;">$0.00</span>
                </div>
                <div class="confirm-detail-row">
                    <span class="confirm-detail-label">Remaining Balance:</span>
                    <span class="confirm-detail-value" id="confirmNewBalance" style="font-size: 16px;">$0.00</span>
                </div>
            </div>
        </div>
        <div class="confirm-actions">
            <button type="button" class="confirm-btn confirm-btn-yes" style="background: linear-gradient(135deg, #f59e0b, #d97706);" onclick="submitWithdraw()">‚úÖ Yes, Withdraw</button>
            <button type="button" class="confirm-btn confirm-btn-no" onclick="closeConfirmation()">‚ùå Cancel</button>
        </div>
    </div>
</div>

<script>
function showWithdrawConfirmation() {
    const form = document.getElementById('withdrawForm');
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }
    
    const amount = parseFloat(document.getElementById('amount').value);
    const currentBalance = parseFloat('@ViewBag.CurrentBalance');
    const newBalance = currentBalance - amount;
    
    if (amount > currentBalance) {
        alert('Insufficient balance for this withdrawal.');
        return;
    }
    
    document.getElementById('confirmAmount').textContent = '$' + amount.toFixed(2);
    document.getElementById('confirmNewBalance').textContent = '$' + newBalance.toFixed(2);
    document.getElementById('confirmOverlay').classList.add('active');
}

function closeConfirmation() {
    document.getElementById('confirmOverlay').classList.remove('active');
}

function submitWithdraw() {
    const form = document.getElementById('withdrawForm');
    form.onsubmit = null;
    form.submit();
}

// Close on overlay click
document.getElementById('confirmOverlay')?.addEventListener('click', function(e) {
    if (e.target === this) {
        closeConfirmation();
    }
});
</script>
