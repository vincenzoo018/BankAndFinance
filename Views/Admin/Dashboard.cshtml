@{
    ViewBag.Title = "Dashboard";
    ViewBag.PageTitle = "Dashboard Overview";
    ViewBag.Breadcrumb = "Home / Dashboard";
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success fade-in" style="background: #dcfce7; color: #16a34a; padding: 16px 20px; border-radius: 12px; margin-bottom: 24px; border-left: 4px solid #16a34a; display: flex; align-items: center; gap: 12px;">
        <span style="font-size: 20px;">‚úÖ</span>
        <strong>@TempData["Success"]</strong>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-error fade-in" style="background: #fee2e2; color: #dc2626; padding: 16px 20px; border-radius: 12px; margin-bottom: 24px; border-left: 4px solid #dc2626; display: flex; align-items: center; gap: 12px;">
        <span style="font-size: 20px;">‚ùå</span>
        <strong>@TempData["Error"]</strong>
    </div>
}

<!-- Quick Actions -->
<div class="card fade-in" style="margin-bottom: 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none;">
    <div style="padding: 24px;">
        <h3 style="margin-bottom: 8px; font-size: 18px;">üëã Welcome back, @Context.Session.GetString("UserName")!</h3>
        <p style="opacity: 0.9; margin-bottom: 20px;">Here's what's happening with your system today</p>
        <div style="display: flex; gap: 12px; flex-wrap: wrap;">
            <a href="@Url.Action("Users", "Admin")" class="btn" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3);">üë• Manage Users</a>
            <a href="@Url.Action("Transactions", "Admin")" class="btn" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3);">üí≥ View Transactions</a>
            <a href="@Url.Action("AuditLogs", "Admin")" class="btn" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3);">üìã Audit Logs</a>
        </div>
    </div>
</div>

<div class="stats-grid">
    <div class="stat-card slide-in">
        <div class="stat-header">
            <div class="stat-icon blue">üë•</div>
            <div class="stat-trend up">+12%</div>
        </div>
        <div class="stat-label">Total Users</div>
        <div class="stat-value">@ViewBag.TotalUsers</div>
        <div class="stat-change">üìà Growing steadily</div>
    </div>
    <div class="stat-card slide-in" style="animation-delay: 0.1s;">
        <div class="stat-header">
            <div class="stat-icon green">üè¶</div>
            <div class="stat-trend up">+8%</div>
        </div>
        <div class="stat-label">Bank Accounts</div>
        <div class="stat-value">@ViewBag.TotalAccounts</div>
        <div class="stat-change">‚úÖ All active</div>
    </div>
    <div class="stat-card slide-in" style="animation-delay: 0.2s;">
        <div class="stat-header">
            <div class="stat-icon yellow">üí∞</div>
            <div class="stat-trend up">+15%</div>
        </div>
        <div class="stat-label">Total Balance</div>
        <div class="stat-value">$@ViewBag.TotalBalance?.ToString("N2")</div>
        <div class="stat-change">üíπ System balance</div>
    </div>
    <div class="stat-card slide-in" style="animation-delay: 0.3s;">
        <div class="stat-header">
            <div class="stat-icon purple">üí∏</div>
            <div class="stat-trend up">+24</div>
        </div>
        <div class="stat-label">Today's Transactions</div>
        <div class="stat-value">@ViewBag.TodayTransactions</div>
        <div class="stat-change">üî• Very active</div>
    </div>
</div>

<!-- Transaction Graph Section -->
<div class="card fade-in" style="margin-bottom: 24px; animation-delay: 0.4s;">
    <div class="card-header" style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 16px;">
        <div class="card-title">üìà Customer Transactions Overview</div>
        <div style="display: flex; gap: 12px; flex-wrap: wrap;">
            <select id="filterType" class="filter-select" onchange="updateChartFilter()" style="padding: 8px 16px; border: 2px solid #e2e8f0; border-radius: 8px; background: white; cursor: pointer; font-size: 14px;">
                <option value="week">Last 7 Days</option>
                <option value="month" selected>This Month</option>
                <option value="year">This Year</option>
                <option value="custom">Custom Range</option>
            </select>
            <div id="customDateRange" style="display: none; gap: 8px;">
                <input type="date" id="startDate" class="filter-input" style="padding: 8px; border: 2px solid #e2e8f0; border-radius: 8px;">
                <input type="date" id="endDate" class="filter-input" style="padding: 8px; border: 2px solid #e2e8f0; border-radius: 8px;">
                <button onclick="applyCustomFilter()" class="btn" style="padding: 8px 16px; background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; border: none; border-radius: 8px; cursor: pointer;">Apply</button>
            </div>
        </div>
    </div>
    <div style="padding: 20px;">
        <canvas id="transactionChart" style="max-height: 400px;"></canvas>
    </div>
    <div style="padding: 0 20px 20px;">
        <div style="display: flex; gap: 24px; justify-content: center; flex-wrap: wrap;">
            <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width: 16px; height: 16px; background: linear-gradient(135deg, #10b981, #059669); border-radius: 4px;"></div>
                <span style="color: #64748b; font-size: 14px;">Deposits</span>
            </div>
            <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width: 16px; height: 16px; background: linear-gradient(135deg, #ef4444, #dc2626); border-radius: 4px;"></div>
                <span style="color: #64748b; font-size: 14px;">Withdrawals</span>
            </div>
            <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width: 16px; height: 16px; background: linear-gradient(135deg, #3b82f6, #2563eb); border-radius: 4px;"></div>
                <span style="color: #64748b; font-size: 14px;">Transfers</span>
            </div>
        </div>
    </div>
</div>

<div class="content-grid">
    <div class="card">
        <div class="card-header">
            <div class="card-title">Recent Transactions</div>
            <a href="@Url.Action("Transactions", "Admin")" class="view-all-btn">View All</a>
        </div>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Transaction ID</th>
                        <th>Account Number</th>
                        <th>Type</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ViewBag.RecentTransactions != null)
                    {
                        @foreach (var transaction in ViewBag.RecentTransactions)
                        {
                            <tr>
                                <td>#TXN@transaction.TransactionId</td>
                                <td>@transaction.BankAccount?.AccountNumber</td>
                                <td>@transaction.TransactionType</td>
                                <td>$@transaction.Amount.ToString("N2")</td>
                                <td>@transaction.TransactionDate.ToString("yyyy-MM-dd")</td>
                                <td><span class="status-badge status-@transaction.Status.ToLower()">@transaction.Status</span></td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" style="text-align: center;">No recent transactions</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <div class="card-title">Recent Activity</div>
        </div>
        <div style="padding: 20px;">
            @if (ViewBag.RecentActivities != null)
            {
                @foreach (var activity in ViewBag.RecentActivities)
                {
                    <div style="display: flex; gap: 16px; padding: 16px; background: #f8fafc; border-radius: 12px; margin-bottom: 12px; transition: all 0.2s ease; cursor: pointer;" onmouseover="this.style.background='#f1f5f9'; this.style.transform='translateX(4px)';" onmouseout="this.style.background='#f8fafc'; this.style.transform='translateX(0)';">
                        <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #3b82f6, #2563eb); border-radius: 10px; display: flex; align-items: center; justify-content: center; font-size: 18px; flex-shrink: 0;">üìã</div>
                        <div style="flex: 1;">
                            <div style="font-weight: 600; color: #1e293b; margin-bottom: 4px;">@activity.Action</div>
                            <div style="font-size: 13px; color: #64748b;">
                                <strong>@activity.User?.FullName</strong> ‚Ä¢ @activity.Module
                            </div>
                            <div style="font-size: 12px; color: #94a3b8; margin-top: 4px;">üïê @activity.Timestamp.ToString("MMM dd, yyyy hh:mm tt")</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p style="text-align: center; color: #64748b; padding: 40px;">No recent activities</p>
            }
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        let transactionChart = null;
        let currentFilterType = 'month';
        
        // Initialize chart
        document.addEventListener('DOMContentLoaded', function() {
            loadTransactionData('month');
        });
        
        function updateChartFilter() {
            const filterType = document.getElementById('filterType').value;
            currentFilterType = filterType;
            
            if (filterType === 'custom') {
                document.getElementById('customDateRange').style.display = 'flex';
                const today = new Date();
                const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
                document.getElementById('startDate').value = lastMonth.toISOString().split('T')[0];
                document.getElementById('endDate').value = today.toISOString().split('T')[0];
            } else {
                document.getElementById('customDateRange').style.display = 'none';
                loadTransactionData(filterType);
            }
        }
        
        function applyCustomFilter() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            if (new Date(startDate) > new Date(endDate)) {
                alert('Start date must be before end date');
                return;
            }
            
            loadTransactionData('custom', startDate, endDate);
        }
        
        async function loadTransactionData(filterType, startDate = null, endDate = null) {
            try {
                let url = '/Admin/GetTransactionData?filterType=' + filterType;
                if (startDate && endDate) {
                    url += '&startDate=' + startDate + '&endDate=' + endDate;
                }
                
                const response = await fetch(url);
                const data = await response.json();
                
                renderChart(data);
                
                // Auto-refresh every 30 seconds
                setTimeout(() => {
                    if (currentFilterType === filterType) {
                        loadTransactionData(filterType, startDate, endDate);
                    }
                }, 30000);
            } catch (error) {
                console.error('Error loading transaction data:', error);
            }
        }
        
        function renderChart(data) {
            const ctx = document.getElementById('transactionChart').getContext('2d');
            
            if (transactionChart) {
                transactionChart.destroy();
            }
            
            transactionChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [
                        {
                            label: 'Deposits',
                            data: data.deposits,
                            borderColor: '#10b981',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.4,
                            pointRadius: 5,
                            pointHoverRadius: 7,
                            pointBackgroundColor: '#10b981',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2
                        },
                        {
                            label: 'Withdrawals',
                            data: data.withdrawals,
                            borderColor: '#ef4444',
                            backgroundColor: 'rgba(239, 68, 68, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.4,
                            pointRadius: 5,
                            pointHoverRadius: 7,
                            pointBackgroundColor: '#ef4444',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2
                        },
                        {
                            label: 'Transfers',
                            data: data.transfers,
                            borderColor: '#3b82f6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.4,
                            pointRadius: 5,
                            pointHoverRadius: 7,
                            pointBackgroundColor: '#3b82f6',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': $' + context.parsed.y.toFixed(2);
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: { color: 'rgba(0, 0, 0, 0.05)' },
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                },
                                color: '#64748b'
                            }
                        },
                        x: {
                            grid: { display: false },
                            ticks: { color: '#64748b' }
                        }
                    }
                }
            });
        }
    </script>
}
